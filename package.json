// /_scripts/update-database.mjs (最终 ESM 优化版)
import { Pool } from 'pg';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import path from 'path';

// --- ESM 最佳实践：明确加载 .env 文件 ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
dotenv.config({ path: path.resolve(__dirname, '../../.env') }); // 假设 .env 在项目根目录

// --- 辅助函数：从 Polygon 获取市场快照 (保持不变) ---
async function getPolygonSnapshot(apiKey) { /* ... */ }

// --- 辅助函数：从 Finnhub 获取财务指标 (保持不变) ---
async function getFinnhubMetrics(symbol, apiKey) { /* ... */ }

// --- “工人”函数：处理一小批股票 (保持不变) ---
async function processStockBatch(tickers, polygonSnapshot, apiKey, pool) {
    const client = await pool.connect();
    let successCount = 0;
    try {
        for (const ticker of tickers) {
            const marketData = polygonSnapshot.get(ticker);
            const financialData = await getFinnhubMetrics(ticker, apiKey);
            if (/* data exists */) {
                await client.query(`UPDATE stocks SET ... WHERE ticker = $1`, [ /* ... */ ]);
                successCount++;
            }
            await new Promise(resolve => setTimeout(resolve, 1100));
        }
    } catch (error) {
        console.error(`A worker failed:`, error);
    } finally {
        client.release();
    }
    return successCount;
}

// --- 主执行函数 (保持不变) ---
async function main() {
    console.log("===== Starting High-Performance Database Update Job =====");
    const { NEON_DATABASE_URL, POLYGON_API_KEY, FINNHUB_API_KEY } = process.env;
    if (!NEON_DATABASE_URL || !POLYGON_API_KEY || !FINNHUB_API_KEY) {
        console.error("FATAL: Missing environment variables.");
        process.exit(1);
    }

    const pool = new Pool({ connectionString: NEON_DATABASE_URL, ssl: { rejectUnauthorized: false } });

    try {
        const { rows: companies } = await pool.query('SELECT ticker FROM stocks');
        const allTickers = companies.map(c => c.ticker);
        const polygonSnapshot = await getPolygonSnapshot(POLYGON_API_KEY);

        const NUM_WORKERS = 5;
        const chunkSize = Math.ceil(allTickers.length / NUM_WORKERS);
        const workerPromises = [];

        for (let i = 0; i < NUM_WORKERS; i++) {
            const chunk = allTickers.slice(i * chunkSize, (i + 1) * chunkSize);
            if (chunk.length > 0) {
                workerPromises.push(processStockBatch(chunk, polygonSnapshot, FINNHUB_API_KEY, pool));
            }
        }

        const results = await Promise.all(workerPromises);
        const totalSuccessCount = results.reduce((sum, count) => sum + count, 0);
        console.log(`All workers finished. Total stocks updated: ${totalSuccessCount}`);
        
        // ... (动态标签计算逻辑) ...

        console.log("===== Job finished successfully. =====");
    } catch (error) {
        console.error("!!!!! Job FAILED !!!!!", error);
        process.exit(1);
    } finally {
        await pool.end();
    }
}

main();