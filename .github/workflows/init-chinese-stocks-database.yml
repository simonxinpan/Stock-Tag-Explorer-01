name: Initialize Chinese Stocks Database

on:
  workflow_dispatch:  # 仅允许手动触发
    inputs:
      force_recreate:
        description: 'Force recreate database tables (DANGER: will delete existing data)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      initial_data_load:
        description: 'Load initial stock data after database creation'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

# 防止并发执行，避免数据库冲突
concurrency:
  group: chinese-stocks-database-init
  cancel-in-progress: false

jobs:
  init-chinese-stocks-database:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # 初始化可能需要更长时间
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Verify environment variables
        env:
          CHINESE_STOCKS_DATABASE_URL: ${{ secrets.CHINESE_STOCKS_DATABASE_URL }}
          FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
        run: |
          echo "🔍 Verifying environment variables..."
          if [ -z "$CHINESE_STOCKS_DATABASE_URL" ]; then
            echo "❌ CHINESE_STOCKS_DATABASE_URL is not set"
            exit 1
          fi
          if [ -z "$FINNHUB_API_KEY" ]; then
            echo "❌ FINNHUB_API_KEY is not set"
            exit 1
          fi
          echo "✅ All required environment variables are set"
          
      - name: Test database connectivity
        env:
          CHINESE_STOCKS_DATABASE_URL: ${{ secrets.CHINESE_STOCKS_DATABASE_URL }}
        run: |
          echo "🔗 Testing database connectivity..."
          node -e "
            const { Pool } = require('pg');
            const pool = new Pool({ 
              connectionString: process.env.CHINESE_STOCKS_DATABASE_URL, 
              ssl: { rejectUnauthorized: false } 
            });
            pool.query('SELECT NOW()').then(() => {
              console.log('✅ Database connection successful');
              process.exit(0);
            }).catch(err => {
              console.error('❌ Database connection failed:', err.message);
              process.exit(1);
            });
          "
          
      - name: Initialize Chinese stocks database structure
        env:
          CHINESE_STOCKS_DATABASE_URL: ${{ secrets.CHINESE_STOCKS_DATABASE_URL }}
          FORCE_RECREATE: ${{ github.event.inputs.force_recreate || 'false' }}
          DEBUG: ${{ github.event.inputs.debug || 'false' }}
        run: |
          echo "🏗️ Initializing Chinese stocks database structure..."
          if [ "$FORCE_RECREATE" = "true" ]; then
            echo "⚠️ WARNING: Force recreate mode enabled - existing data will be deleted!"
            sleep 5
          fi
          node _scripts/init-chinese-stocks-db.mjs
          
      - name: Load initial Chinese stocks data
        if: github.event.inputs.initial_data_load != 'false'
        env:
          CHINESE_STOCKS_DATABASE_URL: ${{ secrets.CHINESE_STOCKS_DATABASE_URL }}
          FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
          DEBUG: ${{ github.event.inputs.debug || 'false' }}
          MARKET_TYPE: chinese_stocks
          INITIAL_LOAD: 'true'
        run: |
          echo "📊 Loading initial Chinese stocks data..."
          echo "⏱️ Expected runtime: 20-25 minutes for full initial load"
          echo "📈 This includes: stock list, basic data, company profiles"
          
          # 1. 获取中概股列表并创建基础记录
          echo "📋 Step 1: Loading Chinese stocks list..."
          node _scripts/update-market-data-finnhub.mjs
          
          # 等待API限制重置
          echo "⏳ Waiting 60 seconds for API rate limit reset..."
          sleep 60
          
          # 2. 更新公司资料
          echo "🏢 Step 2: Loading company profiles..."
          node _scripts/update-company-profiles.mjs
          
          # 等待API限制重置
          echo "⏳ Waiting 60 seconds for API rate limit reset..."
          sleep 60
          
          # 3. 初始财务数据
          echo "💰 Step 3: Loading initial financial data..."
          node _scripts/update-financials-daily.mjs
          
      - name: Verify data completeness
        env:
          CHINESE_STOCKS_DATABASE_URL: ${{ secrets.CHINESE_STOCKS_DATABASE_URL }}
          MARKET_TYPE: chinese_stocks
        run: |
          echo "🔍 Verifying data completeness..."
          node _scripts/check-data-completeness.mjs
          
      - name: Generate initialization report
        env:
          CHINESE_STOCKS_DATABASE_URL: ${{ secrets.CHINESE_STOCKS_DATABASE_URL }}
        run: |
          echo "📋 Generating initialization report..."
          node -e "
            const { Pool } = require('pg');
            const pool = new Pool({ 
              connectionString: process.env.CHINESE_STOCKS_DATABASE_URL, 
              ssl: { rejectUnauthorized: false } 
            });
            
            async function generateReport() {
              try {
                const stocksCount = await pool.query('SELECT COUNT(*) FROM stocks');
                const companiesCount = await pool.query('SELECT COUNT(*) FROM companies WHERE symbol IS NOT NULL');
                const financialsCount = await pool.query('SELECT COUNT(*) FROM financials');
                
                console.log('\n📊 Chinese Stocks Database Initialization Report');
                console.log('================================================');
                console.log('📈 Total stocks:', stocksCount.rows[0].count);
                console.log('🏢 Companies with profiles:', companiesCount.rows[0].count);
                console.log('💰 Financial records:', financialsCount.rows[0].count);
                console.log('✅ Database initialization completed successfully!');
                
                await pool.end();
              } catch (error) {
                console.error('❌ Error generating report:', error.message);
                process.exit(1);
              }
            }
            
            generateReport();
          "
          
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: chinese-stocks-database-init-logs
          path: |
            /home/runner/work/Stock-Tag-Explorer-01/Stock-Tag-Explorer-01/*.log
          retention-days: 14  # 保留更长时间用于调试
          
      - name: Success notification
        if: success()
        run: |
          echo "🎉 Chinese stocks database initialization completed successfully!"
          echo "📊 Database is ready for regular data updates"
          echo "🚀 You can now run the regular update workflows"