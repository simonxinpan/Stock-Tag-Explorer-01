name: ETL Daily Starter (Reset Task Queue)

on:
  schedule:
    - cron: '0 23 * * *'  # 每天 UTC 23:00 运行（美股收盘后）
  workflow_dispatch:  # 允许手动触发

jobs:
  start-daily-etl:
    runs-on: ubuntu-latest
    timeout-minutes: 5  # 5分钟超时，只是重置任务队列
    
    steps:
      - name: Reset ETL Task Queue
        run: |
          echo "🔄 Starting daily ETL process at $(date)"
          echo "📋 Resetting task queue for all stocks..."
          
          # 调用ETL启动API重置任务队列
           response=$(curl -s -w "\n%{http_code}" -X POST \
             -H "Content-Type: application/json" \
             -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
             "https://${{ secrets.VERCEL_DOMAIN }}/api/etl/start")
          
          # 分离响应体和状态码
          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)
          
          echo "📊 API Response (HTTP $http_code):"
          echo "$response_body" | jq '.' 2>/dev/null || echo "$response_body"
          
          # 检查HTTP状态码
          if [ "$http_code" -eq 200 ]; then
            echo "✅ ETL task queue reset successfully"
            
            # 解析响应获取重置统计
            reset_count=$(echo "$response_body" | jq -r '.resetCount // "N/A"')
            estimated_hours=$(echo "$response_body" | jq -r '.estimatedCompletionHours // "N/A"')
            
            echo "📈 Reset Stats:"
            echo "  - Stocks reset: $reset_count"
            echo "  - Estimated completion: $estimated_hours hours"
            echo "⚡ ETL batch processors will handle the rest every 15 minutes"
          else
            echo "❌ ETL task queue reset failed with HTTP $http_code"
            echo "Response: $response_body"
            exit 1
          fi
        
      - name: Report completion
        if: always()
        run: |
          echo "📋 Daily ETL starter completed at $(date)"
          echo "Status: ${{ job.status }}"
          echo "🚀 ETL batch processors (every 15min) will now handle data updates"